<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unity on Chneixn Blog</title><link>https://chneixn.github.io/tags/unity/</link><description>Recent content in Unity on Chneixn Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 14 Mar 2025 22:43:33 +0800</lastBuildDate><atom:link href="https://chneixn.github.io/tags/unity/index.xml" rel="self" type="application/rss+xml"/><item><title>Unity 客户端开发问题笔记</title><link>https://chneixn.github.io/post/unity%E9%9D%A2%E8%AF%95/</link><pubDate>Fri, 14 Mar 2025 21:55:30 +0800</pubDate><guid>https://chneixn.github.io/post/unity%E9%9D%A2%E8%AF%95/</guid><description>&lt;p>3.3 游戏开发问题&lt;/p>
&lt;p>关于游戏开发的通用问题。各个模块会再问一些特定引擎的问题，对照上面的3.2。&lt;/p>
&lt;p>1.游戏AI&lt;/p>
&lt;p>①常用的做法简述（NavMesh + 寻路）&lt;/p>
&lt;p>②NavMesh的生成过程简述&lt;/p></description></item><item><title>UniTask 学习笔记</title><link>https://chneixn.github.io/post/unitask/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/unitask/</guid><description>&lt;h1 id="unitask">UniTask&lt;/h1>
&lt;p>UniTask 是一个公开库，基于 MIT 协议开源，是 Unity 异步调用的一个方案，该方案性能优越&lt;/p>
&lt;h2 id="forget">ForGet&lt;/h2>
&lt;p>是在同步方法中调用异步方法的一个方式, Fire and forget.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">void&lt;/span> &lt;span style="color:#e06c75">Call&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Run&lt;/span>().&lt;span style="color:#e06c75">Forget&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">async&lt;/span> &lt;span style="color:#e06c75">UniTask&lt;/span> &lt;span style="color:#e06c75">Run&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">await&lt;/span> &lt;span style="color:#e06c75">UniTask&lt;/span>.&lt;span style="color:#e06c75">WaitForSeconds&lt;/span>(&lt;span style="color:#d19a66">0.02f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cancel-取消异步操作">Cancel 取消异步操作&lt;/h2>
&lt;p>C# 在设计异步初衷并不希望我们能控制其他线程的运行，但是在 Unity 中确实有一定的需求需要能取消异步，一般使用以下两种方式取消&lt;/p></description></item><item><title>Unity Cinemachine 3.0</title><link>https://chneixn.github.io/post/cinemachine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/cinemachine/</guid><description>&lt;h1 id="cinemachine-的更新-30">Cinemachine 的更新 3.0&lt;/h1>
&lt;h2 id="cinemachin-e的基本介绍">Cinemachin e的基本介绍&lt;/h2>
&lt;p>&lt;a href="https://www.cnblogs.com/blueberryzzz/p/12452838.html">介绍 - CSDN&lt;/a>&lt;/p>
&lt;h2 id="cinemachine-brain">Cinemachine Brain&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Update 方式&lt;/th>
 &lt;th>描述&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>FixedUpdate&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>LateUpdate&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SmartUpdate&lt;/td>
 &lt;td>比较 FixedUpdate 和 LateUpdate 哪个更新的次数更多，就用哪个，会有一些消耗&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ManualUpdate&lt;/td>
 &lt;td>手动在脚本里调用，目前demo里的用法，在lateupdate里调用，再同步一些物体的旋转，防止抖动&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Unity Inspector 拓展笔记</title><link>https://chneixn.github.io/post/unityinspector%E6%89%A9%E5%B1%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/unityinspector%E6%89%A9%E5%B1%95/</guid><description>&lt;h1 id="inspector-扩展">Inspector 扩展&lt;/h1>
&lt;h2 id="将-inspector-扩展应用到子类">将 Inspector 扩展应用到子类&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">[CustomEditor(typeof(BaseGun), true)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">CustomInspector&lt;/span> : &lt;span style="color:#e06c75">Editor&lt;/span>{ }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="重写-oninspectorgui-imgui框架">重写 OnInspectorGUI (IMGUI框架)&lt;/h2>
&lt;h3 id="添加默认显示的-attribute">添加默认显示的 Attribute&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">base&lt;/span>.&lt;span style="color:#e06c75">OnInspectorGUI&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="重写-createinspectorgui-uitoolkit框架">重写 CreateInspectorGUI (UIToolkit框架)&lt;/h2>
&lt;h3 id="添加默认显示的-attribute-1">添加默认显示的 Attribute&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">var&lt;/span> &lt;span style="color:#e06c75">root&lt;/span> = &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">VisualElement&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">root&lt;/span>.&lt;span style="color:#e06c75">Add&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">IMGUIContainer&lt;/span>(&lt;span style="color:#e06c75">OnInspectorGUI&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Unity Mathf 笔记</title><link>https://chneixn.github.io/post/unitymathf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/unitymathf/</guid><description>&lt;h1 id="pingpong">PingPong&lt;/h1>
&lt;p>PingPong 返回一个在零和长度之间递增和递减的值。它遵循三角波公式，其中底部设置为零，峰值设置为长度。&lt;/p>
&lt;p>PingPong 要求值 t 是自增量值。例如，Time.time和Time.unscaledTime。&lt;/p></description></item><item><title>Unity XR Interaction 笔记</title><link>https://chneixn.github.io/post/xr-interactiontoolkit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/xr-interactiontoolkit/</guid><description>&lt;h1 id="interactor">Interactor&lt;/h1>
&lt;h2 id="select-action-trigger">Select Action Trigger&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>State&lt;/td>
 &lt;td>Unity将考虑在按下按钮时激活输入。用户可以在交互成为可能之前保持按钮，并且仍然在交互成为可能时触发交互。（一只手交互时，另一只手不能获取交互物）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>StateChange&lt;/td>
 &lt;td>Unity将考虑仅在按下按钮的框架上激活输入，如果成功，则保持接合，直到释放输入。当交互可能触发交互时，用户必须按下按钮。如果他们在交互成为可能之前开始按下按钮，他们将不会触发交互。（一只手交互时，另一只手可以获取物品交互权）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Sticky&lt;/td>
 &lt;td>交互在输入被按压的帧上开始，并且保持接合直到输入被第二次释放。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Toggle&lt;/td>
 &lt;td>交互在输入被按压的帧上开始，并且保持接合直到输入被第二次按压。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Unity XR 像 Alyx 一样抓取物体</title><link>https://chneixn.github.io/post/unityxr-alxygrab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/unityxr-alxygrab/</guid><description>&lt;h1 id="像-alyx-一样抓取物体">像 Alyx 一样抓取物体&lt;/h1>
&lt;p>Source Video: &lt;a href="https://www.youtube.com/watch?v=WU23Uj1oeh8">https://www.youtube.com/watch?v=WU23Uj1oeh8&lt;/a>&lt;/p>
&lt;p>基于 Unity XR Interaction Toolkit 2.6.3&lt;/p>
&lt;h2 id="ray-interactor">Ray Interactor&lt;/h2>
&lt;p>在 Interaction Layer Mask 设置好交互层级为 &lt;code>Interactable&lt;/code> &lt;code>Default&lt;/code>&lt;/p>
&lt;p>&lt;code>Anchor Control&lt;/code> 选项可选&lt;/p>
&lt;p>&lt;img src="RayInteractorInspector.png" alt="RayInteractorInspector">&lt;/p>
&lt;h2 id="grablale-object">Grablale Object&lt;/h2>
&lt;p>可以抓取的物体需要有 &lt;code>mesh collider&lt;/code> 组件&lt;/p>
&lt;p>注意 &lt;code>Interaction Layer Mask&lt;/code> 以及 &lt;code>Movement Type&lt;/code> 的设置&lt;/p>
&lt;p>&lt;img src="GrablaleObjectInspector.png" alt="GrablaleObjectInspector">&lt;/p>
&lt;h2 id="xr-alyx-grab-interactable">XR Alyx Grab Interactable&lt;/h2>
&lt;p>该脚本继承于 &lt;code>XRGrabInteractable&lt;/code>&lt;/p></description></item><item><title>Unity 单例</title><link>https://chneixn.github.io/post/%E5%8D%95%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/%E5%8D%95%E4%BE%8B/</guid><description>&lt;h1 id="继承-monobehaviour">继承 MonoBehaviour&lt;/h1>
&lt;h2 id="跨场景调用">跨场景调用&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">using&lt;/span> &lt;span style="color:#e06c75">UnityEngine&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">namespace&lt;/span> &lt;span style="color:#e06c75">UnityUtils&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/// &amp;lt;summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/// 跨场景使用的Mono单例基类&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/// &amp;lt;/summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/// &amp;lt;typeparam name=&amp;#34;T&amp;#34;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">PersistentSingleton&lt;/span>&amp;lt;&lt;span style="color:#e06c75">T&lt;/span>&amp;gt; : &lt;span style="color:#e06c75">MonoBehaviour&lt;/span> &lt;span style="color:#c678dd">where&lt;/span> &lt;span style="color:#e06c75">T&lt;/span> : &lt;span style="color:#e06c75">Component&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">AutoUnparentOnAwake&lt;/span> = &lt;span style="color:#e5c07b">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">protected&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#e06c75">T&lt;/span> &lt;span style="color:#e06c75">instance&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">HasInstance&lt;/span> =&amp;gt; &lt;span style="color:#e06c75">instance&lt;/span> != &lt;span style="color:#e5c07b">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#e06c75">T&lt;/span> &lt;span style="color:#e06c75">TryGetInstance&lt;/span>() =&amp;gt; &lt;span style="color:#e06c75">HasInstance&lt;/span> ? &lt;span style="color:#e06c75">instance&lt;/span> : &lt;span style="color:#e5c07b">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#e06c75">T&lt;/span> &lt;span style="color:#e06c75">Instance&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">get&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">instance&lt;/span> == &lt;span style="color:#e5c07b">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">instance&lt;/span> = &lt;span style="color:#e06c75">FindAnyObjectByType&lt;/span>&amp;lt;&lt;span style="color:#e06c75">T&lt;/span>&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">instance&lt;/span> == &lt;span style="color:#e5c07b">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">var&lt;/span> &lt;span style="color:#e06c75">go&lt;/span> = &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">GameObject&lt;/span>(&lt;span style="color:#c678dd">typeof&lt;/span>(&lt;span style="color:#e06c75">T&lt;/span>).&lt;span style="color:#e06c75">Name&lt;/span> + &lt;span style="color:#98c379">&amp;#34; Auto-Generated&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">instance&lt;/span> = &lt;span style="color:#e06c75">go&lt;/span>.&lt;span style="color:#e06c75">AddComponent&lt;/span>&amp;lt;&lt;span style="color:#e06c75">T&lt;/span>&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">instance&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/// &amp;lt;summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/// Make sure to call base.Awake() in override if you need awake.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/// &amp;lt;/summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">protected&lt;/span> &lt;span style="color:#c678dd">virtual&lt;/span> &lt;span style="color:#c678dd">void&lt;/span> &lt;span style="color:#e06c75">Awake&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">InitializeSingleton&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">protected&lt;/span> &lt;span style="color:#c678dd">virtual&lt;/span> &lt;span style="color:#c678dd">void&lt;/span> &lt;span style="color:#e06c75">InitializeSingleton&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (!&lt;span style="color:#e06c75">Application&lt;/span>.&lt;span style="color:#e06c75">isPlaying&lt;/span>) &lt;span style="color:#c678dd">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">AutoUnparentOnAwake&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">transform&lt;/span>.&lt;span style="color:#e06c75">SetParent&lt;/span>(&lt;span style="color:#e5c07b">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">instance&lt;/span> == &lt;span style="color:#e5c07b">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">instance&lt;/span> = &lt;span style="color:#c678dd">this&lt;/span> &lt;span style="color:#c678dd">as&lt;/span> &lt;span style="color:#e06c75">T&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DontDestroyOnLoad&lt;/span>(&lt;span style="color:#e06c75">gameObject&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">instance&lt;/span> != &lt;span style="color:#c678dd">this&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Destroy&lt;/span>(&lt;span style="color:#e06c75">gameObject&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="同场景调用">同场景调用&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">using&lt;/span> &lt;span style="color:#e06c75">System.Collections&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">using&lt;/span> &lt;span style="color:#e06c75">System.Collections.Generic&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">using&lt;/span> &lt;span style="color:#e06c75">UnityEngine&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/// &amp;lt;summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/// 单例模式基类 同场景内使用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/// &amp;lt;/summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/// &amp;lt;typeparam name=&amp;#34;T&amp;#34;&amp;gt;子类&amp;lt;/typeparam&amp;gt; &amp;lt;summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">SameSceneSingleMono&lt;/span>&amp;lt;&lt;span style="color:#e06c75">T&lt;/span>&amp;gt; : &lt;span style="color:#e06c75">MonoBehaviour&lt;/span> &lt;span style="color:#c678dd">where&lt;/span> &lt;span style="color:#e06c75">T&lt;/span> : &lt;span style="color:#e06c75">SameSceneSingleMono&lt;/span>&amp;lt;&lt;span style="color:#e06c75">T&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#e06c75">T&lt;/span> &lt;span style="color:#e06c75">Instance&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">protected&lt;/span> &lt;span style="color:#c678dd">virtual&lt;/span> &lt;span style="color:#c678dd">void&lt;/span> &lt;span style="color:#e06c75">Awake&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">Instance&lt;/span> != &lt;span style="color:#e5c07b">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Debug&lt;/span>.&lt;span style="color:#e06c75">LogError&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span> + &lt;span style="color:#98c379">&amp;#34;出现多个单例!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Instance&lt;/span> = (&lt;span style="color:#e06c75">T&lt;/span>)&lt;span style="color:#c678dd">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">protected&lt;/span> &lt;span style="color:#c678dd">void&lt;/span> &lt;span style="color:#e06c75">OnDestroy&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Destroy&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#c678dd">void&lt;/span> &lt;span style="color:#e06c75">Destroy&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Instance&lt;/span> = &lt;span style="color:#e5c07b">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Unity 的热更新</title><link>https://chneixn.github.io/post/%E7%83%AD%E6%9B%B4%E6%96%B0%E6%A8%A1%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/%E7%83%AD%E6%9B%B4%E6%96%B0%E6%A8%A1%E5%9D%97/</guid><description>&lt;h1 id="热更新">热更新&lt;/h1>
&lt;h2 id="hybridclr--addressable">HybridCLR + Addressable&lt;/h2>
&lt;h3 id="环境确认">环境确认&lt;/h3>
&lt;h4 id="11-unity">1.1 Unity&lt;/h4>
&lt;p>1.1.1 使用的Unity版本为2022.3.13f1&lt;/p>
&lt;p>1.1.2 安装UnityComponent添加对IL2CPP的支持&lt;/p>
&lt;p>笔记：https://blog.csdn.net/Chenxin_37/article/details/136747145&lt;/p></description></item><item><title>Unity 动画 API</title><link>https://chneixn.github.io/post/animation-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/animation-api/</guid><description>&lt;h1 id="判断animator中是否存在动画">判断Animator中是否存在动画&lt;/h1>
&lt;p>Unity中的animator是以哈希值存储动画状态的索引，先通过动画片段名字字符串获取哈希值，再用HasState这个API获取存在状态&lt;/p>
&lt;p>再通过&lt;code>animator.CrossFadeInFixedTime(animationName, time);&lt;/code>过渡动画&lt;/p></description></item><item><title>Unity 基于下推状态机的输入系统解决方案</title><link>https://chneixn.github.io/post/input/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/input/</guid><description>&lt;h1 id="基于-unityinputsystem-和下推状态机的输入系统解决方案">基于 Unity.InputSystem 和下推状态机的输入系统解决方案&lt;/h1>
&lt;blockquote>
&lt;p>原贴地址：&lt;a href="https://zhuanlan.zhihu.com/p/527283873">王子饼干 - 知乎&lt;/a>&lt;/p>&lt;/blockquote>
&lt;h2 id="unityinputststem的优点">&lt;strong>Unity.InputStstem的优点&lt;/strong>&lt;/h2>
&lt;p>InputSystem的优点在于它能够便捷的识别不同设备的按键输入，并使同一动作对不同设备的输入做出响应。&lt;/p></description></item><item><title>Unity 序列化笔记</title><link>https://chneixn.github.io/post/unity%E5%BA%8F%E5%88%97%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/unity%E5%BA%8F%E5%88%97%E5%8C%96/</guid><description>&lt;h2 id="不支持-unity-序列化的字段">不支持 Unity 序列化的字段&lt;/h2>
&lt;p>静态字段 static fields&lt;/p>
&lt;p>只读字段 readonly fields&lt;/p>
&lt;p>常量 const fields&lt;/p>
&lt;p>未带有 [field: SerializeFied] 特性的属性&lt;/p>
&lt;h2 id="支持-unity-序列化的字段">支持 Unity 序列化的字段&lt;/h2>
&lt;p>公开的 非静态 非只读 非常量 字段&lt;/p>
&lt;p>public non-static non-readonly non-const fields&lt;/p>
&lt;p>带有 [SerialzeFied] 的非静态 非只读 非常量 字段&lt;/p></description></item><item><title>Unity 学习 Demo 的模块任务表</title><link>https://chneixn.github.io/post/demo%E7%9A%84%E6%A8%A1%E5%9D%97%E4%BB%BB%E5%8A%A1%E8%A1%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/demo%E7%9A%84%E6%A8%A1%E5%9D%97%E4%BB%BB%E5%8A%A1%E8%A1%A8/</guid><description>&lt;h1 id="3d-demo">3D Demo&lt;/h1>
&lt;h2 id="特点">特点&lt;/h2>
&lt;p>Reliable FPS System 可靠的fps系统&lt;/p>
&lt;p>Smooth Control And Responsive 流畅的控制和灵敏的反应&lt;/p>
&lt;p>Fullbody System 全身渲染和运动系统&lt;/p>
&lt;h2 id="功能模块">功能模块&lt;/h2>
&lt;h3 id="ui框架todo">&lt;strong>UI框架（TODO）&lt;/strong>&lt;/h3>
&lt;p>基于Dotween进行UI动效制作&lt;/p>
&lt;h3 id="存档系统">&lt;strong>存档系统✓&lt;/strong>&lt;/h3>
&lt;p>利用双列表建立可序列化字典，进行游戏数据记录，存档时转为JSON文件实现数据持久化保存和读取&lt;/p></description></item><item><title>Unity 优化笔记</title><link>https://chneixn.github.io/post/unity%E4%BC%98%E5%8C%96%E6%B3%A8%E6%84%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/unity%E4%BC%98%E5%8C%96%E6%B3%A8%E6%84%8F/</guid><description>&lt;h1 id="code">Code&lt;/h1>
&lt;p>继承于unityobject的类的判空，unity对于 == 进行了重构，会带来GC消耗，因此尽量不要在update处进行判空&lt;/p></description></item><item><title>基于行为树的 AI</title><link>https://chneixn.github.io/post/%E5%9F%BA%E4%BA%8E%E8%A1%8C%E4%B8%BA%E6%A0%91%E7%9A%84ai/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/%E5%9F%BA%E4%BA%8E%E8%A1%8C%E4%B8%BA%E6%A0%91%E7%9A%84ai/</guid><description>&lt;h1 id="行为树">行为树&lt;/h1>
&lt;h1 id="示例">示例&lt;/h1>
&lt;h2 id="僵尸-ai">僵尸 AI&lt;/h2>
&lt;h3 id="特点">特点&lt;/h3>
&lt;p>僵尸 AI 能根据自身情况（生命值，中枪与否）和外部条件（周围是否存在玩家），采取合理的行动。&lt;/p>
&lt;h3 id="ai基础">&lt;strong>AI基础&lt;/strong>&lt;/h3>
&lt;p>基本行为操控（靠近，远离，追逐，逃避&amp;hellip;）&lt;/p></description></item><item><title>集群行为 AI子模块</title><link>https://chneixn.github.io/post/ai%E6%A8%A1%E5%9D%97-%E9%9B%86%E7%BE%A4%E8%A1%8C%E4%B8%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/ai%E6%A8%A1%E5%9D%97-%E9%9B%86%E7%BE%A4%E8%A1%8C%E4%B8%BA/</guid><description>&lt;h1 id="类鸟群行为集群行为">类鸟群行为（集群行为）&lt;/h1>
&lt;p>有时在游戏中为了添加沉浸感，会在深海环境，自然开放环境加入鸟群，鱼群。如何控制鸟群的运动，使其符合现实，不会突兀，且性能友好是该部分讨论的内容。&lt;/p></description></item><item><title>库存管理系统</title><link>https://chneixn.github.io/post/charactercontrol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/charactercontrol/</guid><description>&lt;h1 id="模块化角色控制状态机">模块化角色控制状态机&lt;/h1>
&lt;p>在我的 3D Demo 中，我需要控制一个具有高可扩展性的角色控制器，因此对其开始探究&lt;/p>
&lt;p>由于对引擎代码的理解不深，也暂时没有什么兴趣研究，因此选择了基于 KCC 角色控制器框架进行开发&lt;/p></description></item><item><title>库存管理系统</title><link>https://chneixn.github.io/post/%E5%BA%93%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/%E5%BA%93%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</guid><description>&lt;h1 id="库存管理模块-inventory-system">库存管理模块 Inventory System&lt;/h1>
&lt;h2 id="功能实现">功能实现&lt;/h2>
&lt;h3 id="编辑器功能editor">编辑器功能（Editor）&lt;/h3>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 列表显示物品库里所有物品&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 新增 Item 可以自动赋予 ID&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 允许编辑 ID&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 增加 Tip 提示&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 增加 Item 搜索功能&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 增加从 Excel 导入导出功能&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 增加从 JSON 导入导出功能&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Item 可以使用 ItemType 进行分类显示&lt;/li>
&lt;/ul>
&lt;h3 id="游戏内界面ui">游戏内界面（UI）&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;input disabled="" type="checkbox"> 塔科夫式背包&lt;/p></description></item><item><title>寻路算法</title><link>https://chneixn.github.io/post/ai%E6%A8%A1%E5%9D%97-%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chneixn.github.io/post/ai%E6%A8%A1%E5%9D%97-%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95/</guid><description>&lt;h1 id="动态避障算法-rvo">动态避障算法 RVO&lt;/h1>
&lt;p>RVO是基于VO算法的优化&lt;/p>
&lt;p>源码作者Github：https://github.com/snape&lt;/p>
&lt;p>RVO仓库：https://gamma.cs.unc.edu/RVO2/&lt;/p></description></item></channel></rss>